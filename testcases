package com.infymemobile.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.infymemobile.dao.BankDAO;
import com.infymemobile.exception.BankException;
import com.infymemobile.model.Account;
import com.infymemobile.model.Login;
import com.infymemobile.model.Transaction;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

class BankServiceImplTest {

    @Mock
    private BankDAO bankDAO;

    @InjectMocks
    private BankServiceImpl bankService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testLoginUserSuccess() throws BankException {
        Login login = new Login(9876543210L, "password123");
        when(bankDAO.validateLogin(login)).thenReturn(true);

        String result = bankService.loginUser(login);
        assertEquals("Login successful for mobile number: 9876543210", result);
    }

    @Test
    void testLoginUserFailure() throws BankException {
        Login login = new Login(9876543210L, "wrongPassword");
        when(bankDAO.validateLogin(login)).thenThrow(new BankException("Invalid mobile number or password."));

        String result = bankService.loginUser(login);
        assertEquals("Invalid mobile number or password.", result);
    }

    @Test
    void testCreateAccount() throws BankException {
        Account account = new Account(12345678901L, "Test Bank", 5000.0, "SavingsAccount", LocalDate.now(), 9876543210L);
        doNothing().when(bankDAO).saveAccount(account);

        String result = bankService.createAccount(account);
        assertEquals("Account created successfully!", result);
    }

    @Test
    void testViewAllAccounts() {
        Long mobileNo = 9876543210L;
        List<Account> accounts = Arrays.asList(
                new Account(12345678901L, "Test Bank", 5000.0, "SavingsAccount", LocalDate.now(), mobileNo),
                new Account(12345678902L, "Test Bank", 7000.0, "SavingsAccount", LocalDate.now(), mobileNo)
        );
        when(bankDAO.getAccountsByMobileNumber(mobileNo)).thenReturn(accounts);

        List<Account> result = bankService.viewAllAccounts(mobileNo);
        assertEquals(2, result.size());
    }

    @Test
    void testLinkAccount() {
        // Implement this test when the logic for linking an account is available.
    }

    @Test
    void testCheckBalance() {
        Long mobileNo = 9876543210L;
        Long accountNo = 12345678901L;
        when(bankDAO.getBalance(mobileNo, accountNo)).thenReturn(5000.0);

        Double result = bankService.checkBalance(mobileNo, accountNo);
        assertEquals(5000.0, result);
    }

    @Test
    void testFundTransfer() throws BankException {
        Transaction transaction = new Transaction(1, "BankTransfer", 10987654321L, 12345678901L, LocalDate.now(), 1000.0);
        doNothing().when(bankDAO).saveTransaction(transaction);

        String result = bankService.fundTransfer(transaction);
        assertEquals("Fund transferred successfully.", result);
    }

    @Test
    void testViewAllTransactions() {
        Long mobileNo = 9876543210L;
        List<Transaction> transactions = Arrays.asList(
                new Transaction(1, "BankTransfer", 10987654321L, 12345678901L, LocalDate.now(), 1000.0),
                new Transaction(2, "BankTransfer", 10987654322L, 12345678902L, LocalDate.now(), 2000.0)
        );
        when(bankDAO.getTransactionsByMobileNumber(mobileNo)).thenReturn(transactions);

        List<Transaction> result = bankService.viewAllTransactions(mobileNo);
        assertEquals(2, result.size());
    }
}